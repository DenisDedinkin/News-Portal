
1. Создать двух пользователей (с помощью метода User.objects.create_user('username')).

     >>> User.objects.create_user(username = 'Максимов Максим Максимович')
    <User: Максимов Максим Максимович>

    >>> User.objects.create_user(username = 'Иванов Иван Иванович')
    <User: Иванов Иван Иванович>

2. Создать два объекта модели Author, связанные с пользователями.

    >>> user1 = User.objects.get(username = 'Осипов Иван Петрович')
    >>> Author.objects.create(user=user1)
    <Author: Осипов Иван Петрович>

    >>> Author.objects.create(user_id=3)
    <Author: Иванов Иван Иванович>

3. Добавить 4 категории в модель Category.

    Category.objects.create(category_name = 'news')
    <Category: Category object (1)>
    Category.objects.create(category_name = 'sport')
    <Category: Category object (2)>
    Category.objects.create(category_name = 'policy')
    <Category: Category object (3)>
    Category.objects.create(category_name = 'education')
    <Category: Category object (4)>

4. Добавить 2 статьи и 1 новость.

    autor1 = Author.objects.get(pk=1)
    Post.objects.create(author = autor1, post_type = 'A', title = 'Built-in Exceptions', text ='In Python, all exceptions must be instances of a class that derives from BaseException. In a try statement with an except clause that me
    ntions a particular class, that clause also handles any exception classes derived from that class (but not exception classes from which it is derived). Two exception classes that are not related via subclassing are never equivalent,
     even if they have the same name. The built-in exceptions listed below can be generated by the interpreter or built-in functions. Except where mentioned, they have an “associated value” indicating the detailed cause of the error. Th
    is may be a string or a tuple of several items of information (e.g., an error code and a string explaining the code). The associated value is usually passed as arguments to the exception class’s constructor.')



    autor1 = Author.objects.get(pk=1)
     Post.objects.create(author = autor1, post_type = 'A', title = 'Exception context', text ='When raising a new exception while another exception is already being handled, the new exception’s __context__ attribute is automatically
    set to the handled exception. An exception may be handled when an except or finally clause, or a with statement, is used.')


     autor2 = Author.objects.get(pk=2)
    >>> Post.objects.create(author = autor2, post_type = 'N', title = 'About these documents', text ='These documents are generated from reStructuredText sources by Sphinx, a document processor specifically written for the Python docume
    ntation. Development of the documentation and its toolchain is an entirely volunteer effort, just like Python itself. If you want to contribute, please take a look at the Dealing with Bugs page for information on how to do so. New v
    olunteers are always welcome!')
    <Post: About these documents: These documents are generated from reStructuredText sources by Sphinx, a document processor specifically written for the Pyt...>


5. Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий).

     PostCategory.objects.create(post_id = 1, category_id = 4)


     PostCategory.objects.create(post_id = 2, category_id = 4)


    PostCategory.objects.create(post_id = 3, category_id = 1)
    PostCategory.objects.create(post_id = 3, category_id = 3)



6. Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий)

    post1 = Post.objects.get(pk=1)
    post2 = Post.objects.get(pk=2)
    post3 = Post.objects.get(pk=3)

    user1 = User.objects.get(pk=2)
    user2 = User.objects.get(pk=3)
    user3 = User.objects.get(pk=4)

    Comment.objects.create(post = post1, user = user1, comment_text = 'OK')
    <Comment: Comment object (1)>
    Comment.objects.create(post = post2, user = user3, comment_text = 'GOOD')
    <Comment: Comment object (2)>
    Comment.objects.create(post = post3, user = user2, comment_text = 'FINE')
    <Comment: Comment object (3)>
    Comment.objects.create(post = post2, user = user1, comment_text = 'Very good')
    <Comment: Comment object (4)>


7. Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.

    post1 = Post.objects.get(pk=1)
    post2 = Post.objects.get(pk=2)
    post3 = Post.objects.get(pk=3)

>>> post1.like()
>>> post1.like()
>>> post1.like()
>>> post1.like()
>>> post1.like()
>>> post1.dislike()
>>> post1.save()

    post2.like()
>>> post2.like()
>>> post2.like()
>>> post2.like()
>>> post2.like()
>>> post2.like()
>>> post2.dislike()
>>> post2.dislike()
>>> post2.dislike()
>>> post2.save()

    post3.like()
>>> post3.like()
>>> post3.like()
>>> post3.like()
>>> post3.dislike()
>>> post3.dislike()
>>> post3.dislike()
>>> post3.save()

    com1 = Comment.objects.get(pk=1)
>>> com2 = Comment.objects.get(pk=2)
>>> com3 = Comment.objects.get(pk=3)
>>> com4 = Comment.objects.get(pk=4)

    com1.like()
>>> com1.like()
>>> com1.like()
>>> com1.dislike()
>>> com1.save()

    com2.like()
>>> com2.like()
>>> com2.dislike()
>>> com2.save()

    com3.like()
>>> com3.like()
>>> com3.dislike()
>>> com3.save()

    com4.like()
>>> com4.like()
>>> com4.like()
>>> com4.like()
>>> com4.like()
>>> com4.dislike()
>>> com4.save()


8. Обновить рейтинги пользователей.

a1 = Author.objects.get(pk=1)
a1.update_rating()
a1.save()

a2 = Author.objects.get(pk=2)
a2.update_rating()
a2.save()

 думаю так должно работать функцию update_rating() запустить не смог

9. Вывести username и рейтинг лучшего пользователя (применяя сортировку и возвращая поля первого объекта).

Author.objects.all().order_by('-author_rating').values('user__username','author_rating')[:1]
<QuerySet [{'user__username': 'Осипов Иван Петрович', 'author_rating': 0.0}]>


10. Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи,
 основываясь на лайках/дислайках к этой статье.

  Post.objects.all().order_by('-rating').values('time_in','author__user__username','rating','title').first()
{'time_in': datetime.datetime(2023, 2, 8, 14, 48, 48, 826115, tzinfo=datetime.timezone.utc),
'author__user__username': 'Осипов Иван Петрович', 'rating': 5.0, 'title': 'Built-in Exceptions'}

  post1 = Post.objects.all().order_by('-rating').first()
  post1.preview()
  'In Python, all exceptions must be instances of a class that derives from BaseException. In a try statement with an except cl...'

11. Вывести все комментарии (дата, пользователь, рейтинг, текст) к этой статье.

    post1 = Post.objects.all().order_by('-rating').first()

    Comment.objects.filter(post = post1).values('comment_data_in','user__username','comment_rating','comment_text')
    
    
